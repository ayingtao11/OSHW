#include <stdio.h>
#include <stdlib.h>
#define CYLINDERS 5000
#define REQUESTS 1000
int initialHead = 0;
int disk[REQUESTS];
int* sortDisk()
{
   int temp = 0, m = 0, n = 0;
     for (m = 0; m < REQUESTS; ++m)
   {
       for (n = m + 1; n < REQUESTS; ++n)
       {
           if (disk[m] > disk[n])
           {
               temp = disk[m];
               disk[m] = disk[n];
               disk[n] = temp;
           }
       }
   }
   return disk;
}
int discSchedAlgFCFS(int *ran_array)
{
   int i = 0, headMovement = 0;
   int this_start = disk[initialHead];
   for (i = initialHead; i < REQUESTS; i++)
             headMovement += abs(disk[i] - this_start);
   for (i = 0; i < initialHead; i++)
       headMovement += abs(this_start - ran_array[i]);
     return headMovement;
}
int discSchedAlgSSTF(int * disk)
{
     disk = sortDisk();
      int s = initialHead - 1, l = initialHead + 1;
   int smallDiff = 0, largeDiff = 0;
   int headMovement = 0, n = REQUESTS - 2;
   int new_head = initialHead, head_value = disk[initialHead];
      while (n >= 0)
   {
              smallDiff = abs(disk[new_head] - disk[s]);
              largeDiff = abs(disk[l] - disk[new_head]);
              if (smallDiff < largeDiff)
       {
           headMovement += smallDiff;
           new_head = s;
           s--;
       }
       else
       {
           headMovement += largeDiff;
           new_head = l;
           l++;
       }
       n--;
   }
     return headMovement;
}
int discSchedAlgSCAN(int * ranArray) {
   int i = 0, currentValue = 0;
   int savedValue = disk[initialHead], difference = 0;
   int headMovement = 0, curr_i = 0;
   for (i = initialHead - 1; i >= 0; --i)
   {
       currentValue = disk[i];
             difference = abs(savedValue - currentValue);
              headMovement += difference;
              savedValue = currentValue;
   }
   
   headMovement += savedValue;
   savedValue = 0;
   for (i = initialHead + 1; i < REQUESTS; i++)
   {
       currentValue = disk[i];
            difference = abs(currentValue - savedValue);
            headMovement += difference;
            savedValue = currentValue;
   }
      return headMovement;
}
int discSchedAlgCSCAN(int *disk) {
   int i = 0, currentValue = 0;
   int savedValue = disk[initialHead], diff = 0;
   int headMovement = 0, lastIndex = 4999;
   for (i = initialHead + 1; i < REQUESTS; i++)
   {
       currentValue = disk[i];
            diff = abs(savedValue - currentValue);
           headMovement += diff;
             savedValue = currentValue;
   }
   headMovement += lastIndex - savedValue;
   savedValue = 0;
   headMovement += 4999;
   for (i = 0; i < initialHead; i++)
   {
       currentValue = disk[i];
              diff = abs(currentValue - savedValue);
             headMovement += diff;
              savedValue = currentValue;
   }
      return headMovement;
}
int discSchedAlgLOOK(int* ranArray)
{
   int i = 0, currentValue = 0;
   int savedValue = disk[initialHead], diff = 0;
   int headMovement = 0, curr_i = 0;
   for (i = initialHead + 1; i < REQUESTS; i++)
   {
       currentValue = disk[i];
              diff = abs(savedValue - currentValue);
             headMovement += diff;
             savedValue = currentValue;
   }
   for (i = initialHead - 1; i >= 0; --i)
   {
       currentValue = disk[i];
             diff = abs(currentValue - savedValue);
             headMovement += diff;
             savedValue = currentValue;
   }
     return headMovement;
}
int discSchedAlgCLOOK(int* ranArray)
{
   int i = 0, currentValue = 0;
   int savedValue = disk[initialHead];
   int diff = 0;
   int headMovement = 0;
   for (i = initialHead + 1; i < REQUESTS; i++)
   {
       currentValue = disk[i];
           diff = abs(savedValue - currentValue);
            headMovement += diff;
             savedValue = currentValue;
   }
   for (i = 0; i < initialHead; i++)
   {
       currentValue = disk[i];
            diff = abs(currentValue - savedValue);
       headMovement += diff;
           savedValue = currentValue;
   }
   return headMovement;
}
int main(int argc, char *argv[])
{
   int i = 0;
   initialHead = atoi(argv[1]);
   if (argc != 2)
   {
       printf("Pass command line argument for"
           " initial head postion from 0-4999.\n");
       return -1;
   }
   //Generate 1000 cylinder requests
   for (i = 0; i < REQUESTS; i++)
   {
       disk[i] = rand() % 5000;
   }
   printf("\nThe initial position of the disk head:%d", initialHead);
   printf(" , value at intial head: %d\n\n", disk[initialHead]);
   printf("FCFS disk-scheduling algorithm head movements: %d\n",
       discSchedAlgFCFS(disk));
   printf("SSTF disk-scheduling algorithm head movements: %d\n",
       discSchedAlgSSTF(disk));
   printf("SCAN disk-scheduling algorithm head movements: %d\n",
       discSchedAlgSCAN(disk));
   printf("CSCAN disk-scheduling algorithm head movements: %d\n",
       discSchedAlgCSCAN(disk));
   printf("LOOK disk-scheduling algorithm head movements: %d\n",
       discSchedAlgLOOK(disk));
   printf("C-LOOK disk-scheduling algorithm head movements: %d\n\n",
       discSchedAlgCLOOK(disk));

   return 0;
}
